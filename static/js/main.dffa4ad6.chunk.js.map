{"version":3,"sources":["Tetris.js","App.js","serviceWorker.js","index.js"],"names":["i","blocks","color","j","l","o","s","t","z","KEY","DIR","Coart","styled","div","Tile","NextBlock","Tetris","props","courtWidth","courtHeight","initCourt","court","line","Array","apply","map","push","state","playing","current","next","pieces","rows","remainingBlocks","randomPiece","type","length","newPieces","setState","splice","Math","floor","random","dir","x","y","setCurrentPiece","piece","setNextPiece","play","gameTimer","setInterval","drop","stop","clearInterval","onKeyDown","ev","keyCode","keyLeftPressed","move","keyUpPressed","rotate","keydownPressed","onKeyUp","newDir","unoccupied","max","dropPiece","removeLines","occupied","complete","n","getBlock","removeLine","copiedBlocks","JSON","parse","stringify","result","eachBlock","fn","bit","row","col","setBlock","renderNext","flat","block","key","style","border","backgroundColor","renderCourt","tile","addBlocks","document","addEventListener","this","removeEventListener","nextBlock","console","log","width","tabIndex","onClick","disabled","Component","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dffa4ad6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n// Source https://codeincomplete.com/posts/javascript-tetris/\n\n//'#EFE807'\nconst blockColor = '#EFE807';\n\nconst i = { blocks: [0x0f00, 0x2222, 0x00f0, 0x4444], color: blockColor };\nconst j = { blocks: [0x44c0, 0x8e00, 0x6440, 0x0e20], color: blockColor };\nconst l = { blocks: [0x4460, 0x0e80, 0xc440, 0x2e00], color: blockColor };\nconst o = { blocks: [0xcc00, 0xcc00, 0xcc00, 0xcc00], color: blockColor };\nconst s = { blocks: [0x06c0, 0x8c40, 0x6c00, 0x4620], color: blockColor };\nconst t = { blocks: [0x0e40, 0x4c40, 0x4e00, 0x4640], color: blockColor };\nconst z = { blocks: [0x0c60, 0x4c80, 0xc600, 0x2640], color: blockColor };\n\nconst KEY = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 };\nconst DIR = { UP: 0, RIGHT: 1, DOWN: 2, LEFT: 3, MIN: 0, MAX: 3 };\n\nconst Coart = styled.div`\n  display: grid;\n  width: 200px;\n  padding-left: 100px;\n  grid-template-rows: repeat(18, auto);\n  grid-auto-flow: column;\n`;\nconst Tile = styled.div`\n  border: 1px solid black;\n  width: 20px;\n  height: 20px;\n`;\nconst NextBlock = styled.div`\n  display: grid;\n  padding-left: 120px;\n  width: 80px;\n  grid-template-rows: repeat(6, auto);\n  grid-auto-flow: column;\n`;\n\nexport default class Tetris extends Component {\n  courtWidth = 10;\n  courtHeight = 18;\n\n  constructor(props) {\n    super(props);\n    this.state.current = this.randomPiece();\n    this.state.next = this.randomPiece();\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown, false);\n    document.addEventListener('keyup', this.onKeyUp, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown, false);\n    document.removeEventListener('keydown', this.onKeyUp, false);\n  }\n\n  initCourt = () => {\n    const court = [];\n    for (let i = 0; i < this.courtWidth; i++) {\n      const line = Array.apply(null, Array(this.courtHeight)).map(() => null);\n      court.push(line);\n    }\n    return court;\n  };\n\n  state = {\n    blocks: this.initCourt(), // 2 dimensional array (nx*ny) representing tetris court - either empty block or occupied by a 'piece'\n    playing: 0, // true|false - game is in progress\n    current: {}, // the current piece\n    next: {}, // the next piece\n    pieces: [\n      i,\n      i,\n      i,\n      i,\n      j,\n      j,\n      j,\n      j,\n      l,\n      l,\n      l,\n      l,\n      o,\n      o,\n      o,\n      o,\n      s,\n      s,\n      s,\n      s,\n      t,\n      t,\n      t,\n      t,\n      z,\n      z,\n      z,\n      z,\n    ],\n    //score: 0, // the current score\n    rows: 0, // number of completed rows in the current game\n    // step:0 // how long before current piece drops by 1 row\n    remainingBlocks: 0, // how many blocks can you play\n  };\n\n  randomPiece = () => {\n    //console.log('randomPiece');\n    const { pieces } = this.state;\n    let type;\n    if (pieces.length === 0) {\n      const newPieces = [\n        i,\n        i,\n        i,\n        i,\n        j,\n        j,\n        j,\n        j,\n        l,\n        l,\n        l,\n        l,\n        o,\n        o,\n        o,\n        o,\n        s,\n        s,\n        s,\n        s,\n        t,\n        t,\n        t,\n        t,\n        z,\n        z,\n        z,\n        z,\n      ];\n      this.setState({\n        pieces: newPieces,\n      });\n      type = newPieces.splice(\n        Math.floor(Math.random() * pieces.length - 1),\n        1\n      )[0]; // remove a single piece\n    } else {\n      type = pieces.splice(Math.floor(Math.random() * pieces.length - 1), 1)[0]; // remove a single piece\n    }\n    return { type: type, dir: DIR.UP, x: 2, y: 0 };\n  };\n\n  setCurrentPiece = (piece) => {\n    // console.log('setCurrentPiece');\n    this.setState({ current: piece || this.randomPiece() });\n  };\n  setNextPiece = (piece) => {\n    // console.log('setNextPiece');\n    this.setState({ next: piece || this.randomPiece() });\n  };\n\n  play = () => {\n    // console.log('STARTING GAME');\n    this.setState({ playing: true });\n    this.gameTimer = setInterval(this.drop, 1000);\n  };\n\n  stop = () => {\n    // console.log('STOPPING GAME');\n    if (this.gameTimer) {\n      clearInterval(this.gameTimer);\n    }\n    this.setState({ playing: false });\n  };\n\n  onKeyDown = (ev) => {\n    // console.log('ONKEYDOWN');\n    // console.log(this.state.playing);\n    if (this.state.playing) {\n      switch (ev.keyCode) {\n        case KEY.LEFT:\n          this.keyLeftPressed = true;\n          this.move(DIR.LEFT);\n          break;\n        case KEY.RIGHT:\n          this.keyLeftPressed = true;\n          this.move(DIR.RIGHT);\n          break;\n        case KEY.UP:\n          this.keyUpPressed = true;\n          this.rotate();\n          break;\n        case KEY.DOWN:\n          // console.log('this.keydownPressed', this.keydownPressed);\n          if (!this.keydownPressed) {\n            this.keydownPressed = true;\n            this.drop();\n          }\n\n          break;\n        // case KEY.ESC:\n        //   lose();\n        // break;\n        default:\n          break;\n      }\n    }\n  };\n\n  onKeyUp = (ev) => {\n    switch (ev.keyCode) {\n      case KEY.LEFT:\n        this.keyLeftPressed = false;\n        break;\n      case KEY.RIGHT:\n        this.keyLeftPressed = false;\n        break;\n      case KEY.UP:\n        this.keyUpPressed = false;\n        break;\n      case KEY.DOWN:\n        this.keydownPressed = false;\n        break;\n      default:\n        break;\n    }\n  };\n  rotate = () => {\n    const { current } = this.state;\n    const newDir = current.dir === DIR.MAX ? DIR.MIN : current.dir + 1;\n    if (this.unoccupied(current.type, current.x, current.y, newDir)) {\n      this.setState((state) => ({\n        current: { ...state.current, dir: newDir },\n      }));\n    }\n  };\n  drop = () => {\n    //console.log('dropblock');\n    if (!this.move(DIR.DOWN)) {\n      let remainingBlocks = 0;\n      this.setState((state) => {\n        remainingBlocks = Math.max(0, state.remainingBlocks - 1);\n        return {\n          remainingBlocks,\n        };\n      });\n      this.dropPiece();\n      this.removeLines();\n      this.setCurrentPiece(this.state.next);\n      this.setNextPiece(this.randomPiece());\n      const { current } = this.state;\n      if (\n        this.occupied(current.type, current.x, current.y, current.dir) ||\n        remainingBlocks === 0\n      ) {\n        this.stop();\n      }\n    }\n  };\n\n  removeLines = () => {\n    let x;\n    let y;\n    let complete;\n    let n = 0;\n\n    for (y = this.courtHeight; y > 0; --y) {\n      complete = true;\n      for (x = 0; x < this.courtWidth; ++x) {\n        if (!this.getBlock(x, y)) {\n          complete = false;\n        }\n      }\n      if (complete) {\n        this.removeLine(y);\n        y = y + 1; // recheck same line\n        n++;\n      }\n    }\n    if (n > 0) {\n      this.setState((state) => ({ rows: state.rows + n }));\n    }\n  };\n\n  removeLine = (n) => {\n    let x;\n    let y;\n    this.setState((state) => {\n      const copiedBlocks = JSON.parse(JSON.stringify(state.blocks));\n      for (y = n; y >= 0; y--) {\n        for (x = 0; x < this.courtWidth; ++x) {\n          // this.setBlockRow(y, y === 0 ? null : this.getBlock(x, y - 1));\n          copiedBlocks[x][y] = y === 0 ? null : this.getBlock(x, y - 1);\n        }\n      }\n      return { blocks: copiedBlocks };\n    });\n  };\n\n  move = (dir) => {\n    //console.log('move', dir);\n    const { current } = this.state;\n    let { x, y } = current;\n    switch (dir) {\n      case DIR.RIGHT:\n        x = x + 1;\n        break;\n      case DIR.LEFT:\n        x = x - 1;\n        break;\n      case DIR.DOWN:\n        y = y + 1;\n        break;\n      default:\n        break;\n    }\n    if (this.unoccupied(current.type, x, y, current.dir)) {\n      this.setState({ current: { ...current, x, y } });\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  occupied = (type, x, y, dir) => {\n    //console.log('occupied', type, x, y, dir);\n    let result = false;\n    this.eachBlock(type, x, y, dir, (x, y) => {\n      if (\n        x < 0 ||\n        x >= this.courtWidth ||\n        y < 0 ||\n        y >= this.courtHeight ||\n        this.getBlock(x, y)\n      )\n        result = true;\n    });\n    //console.log('OCCUPIED RESULT', result);\n    return result;\n  };\n  unoccupied = (type, x, y, dir) => {\n    //console.log('unoccupied', type, x, y, dir);\n    return !this.occupied(type, x, y, dir);\n  };\n\n  eachBlock = (type, x, y, dir, fn) => {\n    //console.log('eachBlock', type, x, y, dir, fn);\n    let bit,\n      // result,\n      row = 0,\n      col = 0,\n      blocks = type.blocks[dir];\n    for (bit = 0x8000; bit > 0; bit = bit >> 1) {\n      if (blocks & bit) {\n        fn(x + col, y + row);\n      }\n      if (++col === 4) {\n        col = 0;\n        ++row;\n      }\n    }\n  };\n\n  getBlock = (x, y) => {\n    //console.log('getBlock', x, y);\n    const { blocks } = this.state;\n    return blocks[x][y];\n    // return blocks && blocks[x] ? blocks[x][y] : null;\n  };\n\n  dropPiece = () => {\n    //console.log('droppiece');\n\n    const { current } = this.state;\n    this.eachBlock(current.type, current.x, current.y, current.dir, (x, y) => {\n      this.setBlock(x, y, current.type);\n    });\n  };\n\n  setBlock = (x, y, type) => {\n    //console.log('setBlock', x, y, type);\n    // const { blocks } = this.state;\n    // blocks[x] = blocks[x] || [];\n    // blocks[x][y] = type;\n    this.setState((state) => {\n      const copiedBlocks = JSON.parse(JSON.stringify(state.blocks));\n      copiedBlocks[x][y] = type;\n      return { blocks: copiedBlocks };\n    });\n  };\n\n  renderNext = () => {\n    const { next } = this.state;\n    const { type, x, y, dir } = next;\n    //console.log('RENDERNEXT');\n    const blocks = [\n      [null, null, null, null, null, null],\n      [null, null, null, null, null, null],\n      [null, null, null, null, null, null],\n      [null, null, null, null, null, null],\n      [null, null, null, null, null, null],\n      [null, null, null, null, null, null],\n    ];\n    //console.log(blocks);\n    this.eachBlock(type, x, y, dir, (x, y) => {\n      // console.log(x, y, type);\n      blocks[x][y] = 'X';\n    });\n    //console.log('------------------');\n    return (\n      <NextBlock>\n        {blocks.flat().map((block, i) => {\n          //console.log(block);\n          return (\n            <Tile\n              key={i}\n              style={\n                block === null\n                  ? { border: '0px' }\n                  : { backgroundColor: blockColor }\n              }\n            />\n          );\n        })}\n      </NextBlock>\n    );\n  };\n\n  renderCourt = () => {\n    const { blocks, current } = this.state;\n    const copiedBlocks = JSON.parse(JSON.stringify(blocks));\n    if (current) {\n      const { type, x, y, dir } = current;\n      this.eachBlock(type, x, y, dir, (x, y) => {\n        copiedBlocks[x][y] = type;\n      });\n    }\n    return (\n      <Coart>\n        {copiedBlocks.flat().map((tile, i) => {\n          return (\n            <Tile\n              key={tile + i}\n              style={\n                tile === null\n                  ? { backgroundColor: '#535353' }\n                  : { backgroundColor: tile.color }\n              }\n            >\n              {/* {i} */}\n            </Tile>\n          );\n        })}\n      </Coart>\n    );\n  };\n\n  addBlocks = (n) => {\n    this.setState((state) => {\n      return { remainingBlocks: state.remainingBlocks + n };\n    });\n  };\n\n  render() {\n    const nextBlock = this.renderNext();\n    const court = this.renderCourt();\n    console.log('render');\n    const { playing, rows, remainingBlocks } = this.state;\n    return (\n      <div style={{ width: 400 }} tabIndex=\"0\">\n        <div>Score: {rows * 50}</div>\n        <div>Gemaakte lijnen: {rows}</div>\n        <div>Resterende blokken: {remainingBlocks}</div>\n        {nextBlock}\n        {court}\n        <button onClick={this.play} disabled={playing || remainingBlocks === 0}>\n          Start\n        </button>\n        <button onClick={this.stop} disabled={!playing}>\n          Stop\n        </button>\n        <div>\n          <div>\n            <button onClick={() => this.addBlocks(1)}>Geef 1 blok</button>\n          </div>\n          <div>\n            <button onClick={() => this.addBlocks(2)}>Geef 2 blokken</button>\n          </div>\n          <div>\n            <button onClick={() => this.addBlocks(3)}>Geef 3 blokken</button>\n          </div>\n          <div>\n            <button onClick={() => this.addBlocks(4)}>Geef 4 blokken</button>\n          </div>\n          <div>\n            <button onClick={() => this.addBlocks(5)}>Geef 5 blokken</button>\n          </div>\n        </div>\n        {/* <pre>Current: {JSON.stringify(this.state.current, null, 2)}</pre>\n        <pre>Next:{JSON.stringify(this.state.next, null, 2)}</pre> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Tetris from './Tetris';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  outline: none;\n`;\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Tetris />\n      </Wrapper>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}